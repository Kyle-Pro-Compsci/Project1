#!/usr/bin/env python3

import json
import socket
import ssl
import sys
import argparse

# Unsecure flag: 0b391a1a67b5083430f5bd1bc7de5703a821eb16664fffaffd9a9fc7e2044ee4
# Secure flag:  15ae451dbde2c5076513127276ffd7a1d674cb327f2f8a15141df97d6a97301f

# Set command line input flags and arguments
parser = argparse.ArgumentParser("Find the correct wordle guess from a given host socket")
parser.add_argument('-p', '--port', type=int, help="Set the port")
parser.add_argument('-s', help="Opt to use an encrypted TLS socket connection", action='store_true')
parser.add_argument('hostname', help="Specify the name of the server")
parser.add_argument('username', help="NEU Username to login with")
args = parser.parse_args()

# Global Variables
ID = "to be set"
STARTING_WORD = 'slate'

# Encode a string word in to a JSON guess and returns it
# String -> String(JSON)
def encode_guess(guess):
    if(len(guess) != 5):
        print("Warning! Guess is not a 5 character word")
    guess_dict = {
        "type": "guess",
        "id": ID,
        "word": guess
    }
    guess_json = json.dumps(guess_dict) + '\n'
    return guess_json

# Take a guess word, wordle reply array, and a word list -> returns the word list
def filter_wordlist(guess, marks, word_list):

    new_wordlist = []

    green = {} # Dict of letters where their position is known
    yellow = {} # Set of letters that are in the word (but wrong place)
    red = {} # Set of letters that are not in the word
    for i in range(len(marks)):
        if(marks[i] == 0):
            red[i] = guess[i]
        if(marks[i] == 1):
            yellow[i] = guess[i] # May need to change to remove words where yellow letters are in same spot
        if(marks[i] == 2): # Need to make key the letter index in case of repeating letters (e.g. apple)
            green[i] = guess[i]

    for word in word_list: # Remove wrong words
        skip = False
        for g in green:
            if(guess[g] != word[g]):
                skip = True
                break
        if(skip): continue
        for y in yellow:
            if(yellow[y] not in word) or (yellow[y] == word[y]):
                skip = True
                break
        if(skip): continue
        for r in red:
            # Marks can have duplicate letters - only remove letters if they are not mentioned in green or yellow
            if(red[r] in word) and (red[r] not in list(green.values())) and (red[r] not in list(yellow.values())):
                skip = True
                break
        if(skip): continue
        new_wordlist.append(word)
    return new_wordlist

# Main function communicating with the socket. Can be given an unencoded socket and a wrapped encoded socket to get both results.
def socket_comm(sock):
    hello_dict = {'type': 'hello', 'northeastern_username' : args.username}
    hello_message = json.dumps(hello_dict) + '\n'

    sock.send(hello_message.encode())
    hello_data_json = sock.recv(1024) #may need to set into a loop to make sure recieved whole JSON 
    hello_data = json.loads(hello_data_json)
    global ID # Global variable being modified
    ID = hello_data['id']

    # Creating a List of eligible words
    word_list_file = open('project1-words.txt', 'r')
    data = word_list_file.read()
    word_list_file.close()
    word_list = data.split('\n')

    guess = STARTING_WORD
    loop = True # Set false when accept reply is given
    while(loop):
        guess_json = encode_guess(guess)
        sock.send(guess_json.encode())
        reply_json = sock.recv(1024) #May have to change this to loop until end char received
        reply = json.loads(reply_json)

        if (reply['type'] == 'retry'):
            word_list = word_list[1:]# Remove last guess from word_list to prevent loops
            mark_dict = reply['guesses'][len(reply['guesses']) - 1] # Take the latest guess mark combo
            marks = mark_dict['marks']
            word_list = filter_wordlist(guess, marks, word_list)
            guess = word_list[0]

        elif (reply['type'] == 'bye'):
            print(reply['flag'])
            loop = False
            sys.exit()

        else:
            print("Error JSON type received not recognized. Exiting.")
            sys.exit()

# Initializes the connection to the socket. The main function for the program.
def wordle_client():

    host = args.hostname
    port = args.port
    context = ssl.create_default_context()

    if (args.s):
        with socket.create_connection((host, port)) as sock:
            with context.wrap_socket(sock, server_hostname=host) as sock_w:
                socket_comm(sock_w)
    else:
        with socket.create_connection((host, port)) as sock:
            socket_comm(sock)

# Entry point of the program, fixes args
if __name__ == '__main__':
    if args.port == None:
        if (args.s):
            args.port = 27994
        else:
            args.port = 27993
    print(args)
    wordle_client()